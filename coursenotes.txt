a= "hello"
dir(a) #this will list all available methods
or dir(int)
dir(float) 

[Debugging]
1)Use print for debug
2)and also print(f'Number: {type(number)}') #this gives the type of number printed
3)import pdb and pdb.set_trace()

[pdb usage]

(Pdb) l  #(type L in small case to see the line in which we are , this is normally line after pdb.set_trace() )
after that its like ipython , we can easily check values

(pdb) c #for continue

[data types]
Have it in binary with 0b, octale 0o and hex with 0x

>>> c=0b101010111
>>> c
343
>>> d=0o454312
>>> d
153802
>>> e=0xac4d
>>> e
44109
to convert use bin(number) or oct(number) or hex(number)

[for division]
by default normal division gives float 10/5 = 2.0
to have only int values use double divide 10//5 = 2

.4e7 means .4 *10^7 
 4e-4 means 4 divided by 10^4
 
 c='hi "I wasn\'t there" ' 
 \' to escape the character which you think is not the closing 
 
 \n for newline
\t for tabs

[raw strings]

b=r"hello\t stranger"
print(b)
hello\t stranger # its useful to take the text as is without the formatter being excluded, useful for REgex

[triple quotes strings]
print(""" this is triple quoted , isn't it """ ) # dont need to escape single quotes or double if used
also for doc strings
""" this is a sample functon which takes one arg and returns int """ 

[list vs tuple]
list a = [1,2,3,4,4,5]
tupple b=(1,2,3) 
cant do assignment in tupple
[set]
unique values only
c=set(a)
print(c)
set([1,2,3,4])

[dict]
a= {}
a['name']= 'bob'
a['age']= 45
print(a.get('country'))
#this will return NONE rather than key error, its a safer way of doing lookups

[abs]
abs(-5) gives 5

[divmod]
combination of divison and modulo
divmod(10,3)
is (3,1)

[max min]

max([-4,-2])
returns -2
[any vs all ]

a =[true, true, true]
b=[true, false, true]
c=[false , false, false]

any(a) = True
any (b)= true
any(c) = false
all(a) = true
all (b) = false
all (c) = flase

print(r'\t\n\trawwwww')
just prints the raw string

str() vs repr() 
later used for debugging
str for user display

[scope vars]
print(vars())  will print the variables in the local scope
print(globals()) will print the varibles in global scopes as a dictonary

[eval]
print(eval(calc,{})) 
#only the functions allowed inside the {} are available to eval

*todo:
*eval safe use and exec safe use check

[Varibale value vs identity]
Everything is an object in Python 

In [1]: n= 300

In [2]: m= 300

In [3]: id(n)
Out[3]: 140548259814256

id(n)==id(m)
false

[small integer caching]
but if n =30 and m = 30 
id(n)==id(m) 
is True
from -5 to 256 there is a cache by python 

a,b= 250,250
for _ in range(250,260):
    if a is not b:
        break
    a+=1
    b+=1
print (a) 
#answer is 257 because until 256 a and b are the same






